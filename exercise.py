#
#?1 Введите строку, состоящую из 2 цифр.  Преобразуйте ее в целое и вещественное число.  Выведите полученные 3 значения (строку, целое число, вещественное число)  на экран в одной строке через запятую, затем пропустите строку и вновь  выведите значения по одному на строке. Перед каждым значением выведите его тип.
# str_a, str_b = map(int, input('Введите строку, состоящую из 2 цифр: ').split()) #ввод двух значений в одной строке
# b = int(str(str_a) + str(str_b)) # Преобразование строку в целое число
# c = float(str(str_a) + str(str_b)) # Преобразование строку в вещественное  число
# print('Ответ: ', str(str_a) + str(str_b),',', b,',', c, sep="") #Ответ через запятую
# print('')
# print(str(str_a) + str(str_b), '-' ,type(str(str_a) + str(str_b))) # тип данных
# print(b, '-' ,type(b))
# print(c, '-' ,type(c))

#?2 Для заданного четырехзначного числа выведите число, у которого цифры идут в обратном порядке, например, для числа 1234 ответ 4321.
# n = int(input('Введите любое (четырёх значное) число: ')) 
# n1 = n % 10
# n2 = n % 100 // 10
# n3 = n // 100 % 10
# n4 = n // 1000
# n2n = n1 * 1000 + n2 * 100 + n3 * 10 + n4
# print('Ответ:', n2n)

#?3 По номеру года определите, является ли данный год високосным. (год является високосным, если его номер кратен 4, но не кратен 100, а также если он кратен 400).
# year = int(input('Введите год: '))
# if year % 400 == 0:
#     print("%d високосный" %year)
# elif year % 100 == 0:
#     print("%d не високосный" %year)
# elif year % 4 == 0:
#     print("%d високосный" %year)
# else:
#     print("%d не високосный" %year)

#?4 Строка содержит фамилию, имя и отчество, записанные через пробелы.  Например « Иванов Иван Иванович». Для этой строки получите строки вида  «Иванов И.И.» и «И.И. Иванов»
# s = input("Введите ФИО: ").split()
# print("" + s[0] + " " + s[1][0] + "." + s[2][0] + ".")
# print("" + s[1][0] + "." + s[2][0] + "." + s[0])

#?5 Вычислите значение выражения, которое состоит из целых чисел и знаков «+» и «-». Выражение вводится как символьная строка. 
# chislo = input("Какую операцию необходимо провести (+,-): ")
# a = float(input('Введите первое число: '))
# b = float(input("Введите второе число: "))
# if chislo == '+':
#     c = a + b
#     print(c)
# elif chislo == '-':
#     c = a - b
#     print(c)
# print('Подсчет выполнен!')

#?6 Дана строка, состоящая из слов, разделенных пробелами. В этой строке: Удалите все лишние пробелы (Удалите в начале и в конце. Между словами  надо оставить ровно один пробел); В первых двух словах поменяйте регистр символов (строчные сделать прописными, прописные – строчными);Определите, сколько в строке слов.
# def change(s):
#     return "".join(x.upper() if x.islower() else x.lower() for x in s)
# s = input().split()
# s[0], s[1] = change(s[0]), change(s[1])
# print(*s)
# print(len(s))

#?7 Имеются 2 списка целых чисел, упорядоченные по возрастанию. 
#? Получите новый список, содержащий все элементы исходных списков, в котором элементы также упорядочены в порядке возрастания, не используя сортировку.
# mas_1 = map(int, input("Первый список чисел: ").split())
# mas_2 = map(int, input("второй список чисел: ").split())
# sortMas_1 = sorted(mas_1)
# print("Отсортированный первый список: ", sortMas_1)
# sortMas_2 = sorted(mas_2)
# print("Отсортированный первый список: ", sortMas_2)
# list = sortMas_1 + sortMas_2
# n = 1 
# while n < len(list):
#     for i in range(len(list)-n):
#         if list[i] > list[i+1]:
#             list[i],list[i+1] = list[i+1],list[i]
#     n += 1
# print(list)


#?8 Пользователь вводит произвольную строку в виде нескольких слов. 
#? Надо составить список, в котором слова находятся в лексикографическом порядке по возрастанию. 
#? Затем надо составить строку, в которой все слова списка, сформированного ранее, перечисляются через пробел. 
#? Словом в строке надо считать подстроку, ограниченную пробелами или началом и концом строки.
# my_arr = input("Введите произвольную строку в виде нескольких слов: ").split()
# my_arr_sort = " ".join(sorted(my_arr))
# print(my_arr_sort)


#?9 Реализуйте умножение двух матриц, записанных как список списков (без использования специализированных библиотек). 
#? При этом надо проверить, что размерности матриц таковы, что их можно умножать. Если не, то надо вывести сообщение об ошибке.
# a = [[1,2,3],[1,2,3]] # первая матрица
# b = [[1,2],[3,1],[2,3]] # вторая матрица
# result = [[sum(x*y for x,y in zip(X_row,Y_col)) for Y_col in zip(*b)] for X_row in a] # перемножение матриц. Функция zip () в Python создает итератор, который объединяет элементы из нескольких источников данных.
# for r in result:
#     print(r)

#?10 Надо реализовать игру "Волки и овцы"
#! Не сделано

#?11 Имеется строка с названиями товаров вида «яблоки, груши, яблоки, киви, сливы, киви». 
#? Товары перечислены через запятую, товары могут повторяться, после запятой может стоять пробел. 
#? Выведите таблицу из двух колонок. В левой колонке - название товара, в правой - количество названий этого товара, встречающихся в строке. 
#? Таблицу надо упорядочить по уменьшению количества названий товара в строке.
# def second(n):
#     return n[1]
# a = str("яблоки, груши, яблоки, киви, сливы, киви").split(", ")
# c = 0
# k = []
# h = []
# for b in a:
#     if b not in h:
#         for l in a:
#             if b == l:
#                 c += 1
#         h.append(b)
#         k.append(c)
#         c = 0
# # h = set(h)
# alk = sorted(list(zip(h, k)), key = second, reverse = True)
# print(alk)
# print("\n".join("{}\t{}".format(x, y) for x,y in alk))

#?12 В строке закодировано сообщение при помощи азбуки Морзе (без знаков препинания - закодированы только буквы английского алфавита и цифры) Тире кодируется дефисом, а точка - точкой. 
#? Между буквами ставится пробел. Программа должна по строке с кодом Морзе составить соответствующую строку на английском языке и вывести ее на печать.
# MOR = {'.-': 'A', '-...': 'B', '-.-.': 'C', '-..': 'D', '.': 'E', '..-.': 'F', '--.': 'G', '....': 'H', '..': 'I', '.---': 'J', '-.-': 'K', '.-..': 'L', '--': 'M', '-.': 'N', '---': 'O', '.--.': 'P', '--.-': 'Q', '.-.': 'R', '...': 'S', '-': 'T', '..-': 'U', '...-': 'V', '.--': 'W', '-..-': 'X', '-.--': 'Y', '--..': 'Z', '-----': '0', '.----': '1', '..---': '2', '...--': '3', '....-': '4', '.....': '5', '-....': '6', '--...': '7', '---..': '8', '----.': '9'}

# def mte(me):
#     me = me.split(" ")
#     eng = []
#     for code in me:
#         if code in MOR:
#             eng.append(MOR[code])
#     return " ".join(eng)
# def main():
#     morse = input()
#     english = mte(morse)
#     print(english)
# main()

#?13 Создайте 2 списка из 5 случайных целых чисел от 1 до 10. Найдите симметрическую разность  множеств, 
#? соответствующих спискам в выведете ее на печать.
# from random import randrange
# a = []
# b = []
# i = 0
# while i<5:
#     a.append(randrange(1,10))
#     b.append(randrange(1,10))
#     i+=1
# result=list(set(a) ^ set(b))
# print(result)

#?14 Из множества целых чисел от 1 до 100 (включительно) выделите в отдельное множество и выведите его на печать - числа, 
#? кратные либо 2, либо 3, но при этом не одновременно 2 и 3.
# i = 0
# multiples=set()
# multipl=set(range(1, 101))
# for i in multipl:
#     if (i%2==0 or i%3==0) and not(i%2==0 and i%3==0):
#         multiples.add(i)
# print(multiples)


#?15 Введите целое число. Выведите его на экран и допишите к нему слова «рубль», «рубля» или «рублей» в зависимости от значения.
# n = int(input("Введите число: ")) 
# n2 = n % 100
# if 11 <= n2 <= 19:
#     print(str(n) + ' рублей')
# else:
#     n1 = n % 10
#     if n1 == 0 or 5 <= n1 <= 9:
#         print (str(n) + ' рублей')
#     elif n1 == 1:
#         print (str(n) + ' рубль')
#     elif 2 <= n1 <= 4:
#         print (str(n) + ' рубля')

#?16 Напишите программу, которая находит наибольший общий делитель двух целых чисел, используя алгоритм Евклида - 
# a = int(input('Введите первое число: '))
# b = int(input('Введите второе число: '))
# while a!=0 and b!=0:
#     if a > b:
#         a = a % b
#     else:
#         b = b % a
# print ('Подсчет выполнен!', a+b)

#?17 Выведите значение заданного целого числа от 0 до 1000 прописью. 
#? Например, «сто девяносто один» для числа 191, «одиннадцать» для числа 11.
# s1 = {1:'один', 2:'два', 3:'три', 4:'четыре', 5:'пять', 6:'шесть', 7:'семь', 8:'восемь', 9:'девять', 0:''} #словарь для чисел от 0 до 9
# s2 = {2:'двадцать', 3:'тридцать', 4:'сорок', 5:'пятьдесят', 6:'шестьдесят', 7:'семьдесят', 8:'восемьдесят', 9:'девяносто'} #словарь для чисел от 20 до 90
# s3 = {1:'сто', 2:'двести', 3:'триста', 4:'четыреста', 5:'пятьсот', 6:'шестьсот', 7:'семьсот', 8:'восемьсот', 9:'девятьсот'} #словарь для чисел от 100 до 900
# tsat = {10:'десять', 11:'одиннадцать', 12:'двенадцать', 13:'тринадцать', 14:'четырнадцать', 15:'пятнадцать', 16:'шестнадцать', 17:'семнадцать', 18:'восемнадцать', 19:'девятнадцать'} #словарь для чисел от 10 до 19
# s = input("введите число от 0 до 1000") #Вводимое число пользователя
# p = [] # массив
# def f(s):
#     if len(s) > 1:
#         if 9 < int(s[-2:]) < 20:
#             p.append(tsat[int(s[-2:])])
#         elif int(s[-2:]) > 19:
#             p.append(s1[int(s[-1])])
#             p.append(s2[int(s[-2])])
#     else:
#         if int(s[-1]) > 0:
#             p.append(s1[int(s[-1])])
#         else:
#             p.append('ноль')
#     if len(s) == 3:
#         p.append(s3[int(s[-3])])
#     print(' '.join(p[::-1]))
#     p.clear()
# f(s)

#?18 Имеется список названий месяцев: [‘января’, ‘февраля’, ‘марта’, ‘апреля’, ’мая’, ‘июня’, ‘июля’, ‘августа’, ‘сентября’, ‘октября’, ‘ноября’, ‘декабря’]. 
#? Создайте по этому списку словарь, в котором название месяца будет ключом, а номер месяца (от 1 до 12) – значением. 
#? Используя полученный словарь преобразуйте строку с датой вида «1 января 2021» в строку «1.01.2021»

# month = {'января': '01','февраля':'02', 'марта':'03','апреля':'04','мая':'05','июня':'06','июля':'07','августа':'08','сентября':'09','октября': '10','ноября': '11','декабря': '12' }
# s = input("Введите даты, фомат 1 января 2022 ").split()
# month_number = []
# i = 0
# error = "Error!"
# key = s[1]
# kod = month.get(key, error)
# if kod != error:
#     i = kod + ""
#     month_number.append(i)
#     print(s[0] + "." + "".join(month_number)+ "." + s[2])


#?19 Реализовать функции для выполнения четырех арифметических операций (сложение, вычитание, умножение, деление), 
#? преобразующих целые числа в целое число (т.е если результат операции оказался дробным, то надо преобразовать его в целое по математическому правилу округления). 
#? Для выполнения задания надо создать словарь с функциями и соответствующими им символами операций. В программе надо для двух конкретных чисел выполнить выбранную 
#? пользователем (по введенному пользователем имени) арифметическую операцию.

# # Создание функции
# def main():
#     # Выводим сообщение
#     print("Это простой калькулятор на Python")
#     # Запускаем бесконечный цикл
#     while True:
#         # Выводим сообщение какие действия есть
#         print("Выберите действие которое хотите сделать:\n"
#             "Сложить: +\n"
#             "Вычесть: -\n"
#             "Умножить: *\n"
#             "Поделить: /\n"
#             "Выйти: q\n")
#         # Переменная для хранения действия
#         action = input("Действие: ")
#         # Если action равен q то
#         if action == "q":
#             # Выводим сообщение
#             print("Выход из программы")
#             # Выходим из цикла
#             break
#         # Если action равен +, -, *, /, то
#         if action in ('+', '-', '*', '/'):
#             # Присваиваем значение переменной x
#             x = float(input("x = "))
#             # Присваиваем значение переменной y
#             y = float(input("y = "))
#             # Если action равен + то
#             if action == '+':
#                 # Выводим сумму x и y
#                 print('%.2f + %.2f = %.2f' % (x, y, x+y))
#             # Если action равен - то
#             elif action == '-':
#                 # Выводим разность x и y
#                 print('%.2f - %.2f = %.2f' % (x, y, x-y))
#             # Если action равен * то
#             elif action == '*':
#                 # Выводим результат умножения x на y
#                 print('%.2f * %.2f = %.2f' % (x, y, x*y))
#             # Если action равен / то
#             elif action == '/':
#                 # Если y не равен нулю то
#                 if y != 0:
#                     # Выводим результат деления x на y
#                     print('%.2f / %.2f = %.2f' % (x, y, x/y))
#                 else: # Иначе
#                     # Выводим сообщение, что на ноль делить нельзя
#                     print("Деление на ноль!")


#?20 Реализовать функцию умножения, принимающую неограниченное количество значений. Написать примеры использования этой функции с аргументами: 
#? •	(15, 10 ,5)•	(3, 1)•	[2, 35, 55]•	(5, 10 ,15, 20)
# def add(*args): # функция для принятия нескольких аршументов
#     m = 1
#     for n in args:
#         m = m * n
#     print("multiplication: ", m)
# add(15, 10, 5)
# add(3, 1)
# add(2, 35, 55)
# add(5, 10 ,15, 20)

#?21 Дана дробь n / m , n и m - натуральные числа. Напишите 2 функции, которые сокращают эту дробь, то есть находят числа p и q такие, 
#? что    n / m = p / q , и дробь p / q — несократимая: 1.	Случай 1- аргументами функции являются числа n, m, функция возвращает кортеж (p, q); 
#? 2.	Случай2 аргументом функции является список [n, m], функция не возвращает значения, а изменяет этот список на [p, q].
# код Случай 1
# def ReduceFraction(n, m):
#     if n > m:
#         k = n
#     else:
#         k = m
#     while k != 1:
#         if n % k == 0 and m % k == 0:
#             return n // k, m // k
#         else:
#             k -= 1
#     return n, m
# n, m = int(input("Числитель: ")), int(input("Знаменатель: "))
# print("Ответ: ")
# print(*ReduceFraction(n, m)) # функция возвращает кортеж

# код Случай 2
# def met(n, m):
#     if n > m:
#         k = n
#     else:
#         k = m
#     while k != 1:
#         if n % k == 0 and m % k == 0:
#             return n // k, m // k
#         else:
#             k -= 1
#     return n, m
# n, m = [int(s) for s in input("Введите числитель и знаменатель через пробел: ").split()]
# print("Ответ: ")
# print(met(n, m))


#?22 Написать функцию, которая преобразует целое число (от 0 до 1000) из текстового представления на русском языке в число типа int. 
#? И сообщает об ошибках (выводит на экран описание типа ошибки и возвращает чило -1). 
#? Пример: to_int('тридцать три')    ->   33 Пример: to_int("сто сорок тридцать два сто")    ->  -1 Вывод: тридцать - некорректное расположение в числе.
#! Не сделано


#?23 Элементами матрицы являются случайные положительные целые числа из заданного диапазона. 
#? Число строк и столбцов матрицы задается с клавиатуры. Написать функцию подсчета среднего арифметического элементов над 
#? главной диагональю и количество четных элементов под ней. Если матрица не является квадратной, должно генерироваться исключение
#! Не сделано


#?24 Напишите функцию для решения уравнений степени не выше второй (квадратные и линейные): - если у функции три аргумента, 
#? их надо трактовать как a, b и c в уравнении ax 2 + bx + c = 0; - если два — как коэффициенты b и c в уравнении bx + c = 0;
#?  - если один — как коэффициент c в уравнении c = 0; - если список коэффициентов пуст или коэффициентов больше трёх, то функция должна вернуть None. 
#? Функция возвращает список, содержащий все корни уравнения (два, один или ни одного). Если корнем является любое значение x, функция возвращает список, содержащий символ «*» (["*"]).
# import math # библиотека math содержит наиболее применяемые математические функции и константы
# def rootsOfQuadraticEquation(a,b,c): #
#     if a==0 and b==0 and c==0: # если все константы равны 0 то
#         return ['None']# то функция должна вернуть None
#     elif a == 0 and b == 0:# если а и b константы равны 0 то
#         return ["0"]# коэффициент c в уравнении c = 0
#     elif a==0:# если а равна 0 то
#         return [(c*(-1))/b]# формула 
#     elif b==0:# если b равна 0 то
#         return [math.sqrt((-1*b)/a)]# формула
#     elif  c==0:# если с равна 0 то
#         return[0, (-1*b)/a]# формула
#     else:#
#         q = b**2# возведение в степень
#         w = -4*a*c#  дискриминант
#         D = q+w# дискриминант
#         if D<0:# если дискриминант меньше нуля, то корней нет
#             return["корней нет"]#
#         elif D== 0:# если дискриминант равен нулю, то
#             return[(-1*b)/(2*a)]# формула
#         else:#
#             D = math.sqrt(D)# корень дискриминанта
#             return[int(((-1*b)-D)/(2*a)), ((-1*b)+D)/(2*a) ]#
# a, b, c = input("уравнение вида ax 2 + bx + c = 0, но только коэффициенты: ").strip().split()# ввод
# print(rootsOfQuadraticEquation(int(a),int(b),int(c)))#  вывод и вызов функции



#?25 Задан список словарей: dl = {'a': 10, 'b': 20, 'c': 1}, {'a': 5, 'b': 10, 'z': 10}, {'a': 3, 'y': 7}. 
#? С помощью анонимной функции отсортировать словари по значению, содержащемуся по ключу 'a'.
# dl = {'a': 10, 'b': 20, 'c': 1}, {'a': 5, 'b': 10, 'z': 10}, {'a': 3, 'y': 7}
# newlist = sorted(dl, key=lambda x: x['a'])
# print(newlist)


